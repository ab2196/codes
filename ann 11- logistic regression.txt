#Import the necessary libraries:
import tensorflow as tf
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

#Load and preprocess the data:
iris = load_iris()
X = iris.data
y = (iris.target == 0).astype(int)  # Convert to binary classification (0 or 1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

#Define the model architecture and compile it:
model = tf.keras.models.Sequential([tf.keras.layers.Dense(1, activation='sigmoid', input_shape=(4,))])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

#Train the model:
model.fit(X_train_scaled, y_train, epochs=10, batch_size=32, verbose=1)

#Evaluate the model on the test set:
loss, accuracy = model.evaluate(X_test_scaled, y_test)
print(f'Test Loss: {loss:.4f}')
print(f'Test Accuracy: {accuracy:.4f}')

