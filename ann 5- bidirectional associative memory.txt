import numpy as np

# Set A: Input Pattern
x1 = np.array([[1], [1], [1], [1], [1], [1]])
x2 = np.array([[-1], [-1], [-1], [-1], [-1], [-1]])
x3 = np.array([[1], [1], [-1], [-1], [1], [1]])
x4 = np.array([[-1], [-1], [1], [1], [-1],[-1]])

# Set B: Target Pattern
y1 = np.array([[1], [1], [1]])
y2 = np.array([[-1], [-1], [-1]])
y3 = np.array([[1], [-1], [1]])
y4 = np.array([[-1], [1], [-1]])


# Calculate weight Matrix: W
inputSet = np.concatenate((x1, x2, x3, x4), axis = 1)
targetSet = np.concatenate((y1.T, y2.T, y3.T, y4.T), axis = 0)

print("\nWeight matrix:")
weight = inputSet@targetSet
print(weight)

print("\n-----------------------------------")

# Test for Input Patterns: Set A
print("\nTesting for input patterns: Set A")

def testInputs(x, weight):# Multiply the input pattern with the weight matrix (weight.T X x)
    y = np.dot(weight.T, x)
    y[y < 0] = -1
    y[y >= 0] = 1
    return np.array(y)

print("\nOutput of input pattern 1\n",testInputs(x1, weight))
print("\nOutput of input pattern 2\n",testInputs(x2, weight))
print("\nOutput of input pattern 3\n",testInputs(x3, weight))
print("\nOutput of input pattern 4\n",testInputs(x4, weight))
print("\n-----------------------------------")

# Test for Target Patterns: Set B
print("\nTesting for target patterns: Set B")

def testTargets(y, weight): # Multiply the target pattern with the weight matrix (weight X y)
    x = np.dot(weight, y)
    x[x <= 0] = -1
    x[x > 0] = 1
    return np.array(x)

print("\nOutput of target pattern 1\n",testTargets(y1, weight))
print("\nOutput of target pattern 2\n",testTargets(y2, weight))
print("\nOutput of target pattern 3\n",testTargets(y3, weight))
print("\nOutput of target pattern 4\n",testTargets(y4, weight))